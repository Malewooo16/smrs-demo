generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      UserRole
  parentId  Int?     @unique
  teacherId Int?     @unique
  parent    Parent?  @relation(fields: [parentId], references: [id])
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
}

model Parent {
  id          Int         @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String      @unique
  identifier  String      @unique @default(uuid())
  phoneNumber String      @default("")
  admissions  Admission[]
  testStudent Student[]
  user        User?
  StudentT    StudentT[]
}

model Classes {
  id          Int           @id @default(autoincrement())
  name        String
  schoolId    Int?
  school      School?       @relation(fields: [schoolId], references: [id])
  teacher     Teacher?       @relation(fields: [teacherId], references: [id])
  teacherId   Int?
  students    Student[]
  StudentT    StudentT[]
  ClassCourse ClassCourse[]
}

model School {
  id                     Int               @id @default(autoincrement())
  name                   String
  address                String
  admissionDates         Json?
  admissionStatus        Boolean?          @default(false)
  admissionClasses       String[]          @default([])
  emailAddress           String            @default("")
  phoneNumber            String            @default("")
  website                String            @default("")
  activeAdmissionClasses Json[]            @default([])
  admissions             AdmissionStatus[]
  classes                Classes[]
  students               Student[]
  teachers               Teacher[]
  StudentT               StudentT[]
}

model Admission {
  id             String            @id @default(uuid())
  firstName      String
  lastName       String
  dob            DateTime
  parentId       Int
  imgUrl         String?
  objects        Json?
  homeAddress    String
  Parent         Parent            @relation(fields: [parentId], references: [id])
  AdmissionStats AdmissionStatus[]
  StudentT       StudentT[]
}

model StudentT {
  id                Int                @id @default(autoincrement())
  name              String
  schoolId          Int
  classId           Int?
  studentData       Admission          @relation(fields: [admissionId], references: [id])
  admissionId       String
  parentId          Int?
  courseEnrollments CourseEnrollment[]
  class             Classes?           @relation(fields: [classId], references: [id])
  parent            Parent?            @relation(fields: [parentId], references: [id])
  school            School?            @relation(fields: [schoolId], references: [id])
  remarks           StudentRemarks[]
}

model AdmissionStatus {
  id            Int       @id @default(autoincrement())
  admissionId   String    @unique
  schoolId      Int
  status        String    @default("Pending")
  selectedClass String    @default("")
  admission     Admission @relation(fields: [admissionId], references: [id])
  school        School    @relation(fields: [schoolId], references: [id])
}

model Student {
  id                Int                @id @default(autoincrement())
  firstName         String
  lastName          String
  email             String             @unique
  age               Int?
  parentId          Int?
  schoolId          Int?
  classId           Int?
  courseEnrollments CourseEnrollment[]
  class             Classes?           @relation(fields: [classId], references: [id])
  parent            Parent?            @relation(fields: [parentId], references: [id])
  school            School?            @relation(fields: [schoolId], references: [id])
}

model Teacher {
  id                  Int           @id @default(autoincrement())
  firstName           String
  lastName            String
  identifier          String        @unique @default(uuid())
  email               String        @unique
  phoneNumber         String
  schoolId            Int?
  courses             Course[]
  school              School?       @relation(fields: [schoolId], references: [id])
  user                User?
  canAccessAdmissions Boolean       @default(false)
  canAccessAcademics  Boolean       @default(false)
  canAccessDiscpline  Boolean       @default(false)
  classCourses        ClassCourse[]
  Classes             Classes[]
}

model StudentRemarks {
  id         String    @id @default(uuid())
  name       String
  remarks    String
  StudentT   StudentT? @relation(fields: [studentTId], references: [id])
  studentTId Int?
}

model Course {
  id          Int                @id @default(autoincrement())
  name        String
  description String?
  tagFor      String?
  schoolId    Int                @default(0)
  teacherId   Int?
  teacher     Teacher?           @relation(fields: [teacherId], references: [id])
  enrollments CourseEnrollment[]

  ClassCourse ClassCourse[]
}

model CourseEnrollment {
  id         Int       @id @default(autoincrement())
  studentId  Int
  courseId   Int
  score      Json? // Adding scores field
  course     Course    @relation(fields: [courseId], references: [id])
  student    Student   @relation(fields: [studentId], references: [id])
  studentT   StudentT? @relation(fields: [studentTId], references: [id])
  studentTId Int?

  @@unique([studentId, courseId]) // Ensure uniqueness of student-course combination
}

model ClassCourse {
  id        Int     @id @default(autoincrement())
  classId   Int
  courseId  Int
  teacherId Int // Reference to the teacher accessing the data for the class
  class     Classes @relation(fields: [classId], references: [id])
  course    Course  @relation(fields: [courseId], references: [id])
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  @@unique([classId, courseId])
}

enum UserRole {
  Parent
  Teacher
  HeadTeacher
  SysAdd
}
